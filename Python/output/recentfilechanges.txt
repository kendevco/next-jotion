// tsconfig.json
{ "compilerOptions": { "target": "es5", "lib": ["dom", "dom.iterable", "esnext"], "allowJs": true, "skipLibCheck": true, "strict": true, "noEmit": true, "esModuleInterop": true, "module": "esnext", "moduleResolution": "bundler", "resolveJsonModule": true, "isolatedModules": true, "jsx": "preserve", "incremental": true, "plugins": [ { "name": "next" } ], "baseUrl": ".", "paths": { "@/*": ["./*"], "@hooks/*": ["./hooks/*"] } }, "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"], "exclude": ["node_modules"] }

// app\(main)\(routes)\documents\page.tsx
; import { useUser } from ; import { useMutation } from ; import { api } from ; import { Button } from ; import { PlusCircle } from ; import { useRouter } from ; import { toast } from ; import { useEffect, useState } from ; import Head from ; import { Id } from ; interface Workspace { _id: Id<>; _creationTime: number; userId: string; authorizedUsers: { userId: string; permission: string }[]; } const DocumentsPage = () => { const router = useRouter(); const { user } = useUser(); const createDocument = useMutation(api.documents.create); const getOrCreateWorkspace = useMutation(api.workspaces.getOrCreateUserWorkspace); const [workspace, setWorkspace] = useState<Workspace | null>(null); useEffect(() => { const fetchWorkspace = async () => { const ws = await getOrCreateWorkspace(); setWorkspace(ws); }; fetchWorkspace(); }, [getOrCreateWorkspace]); const onCreate = () => { if (!workspace) return; const promise = createDocument({ title: , workspaceId: workspace._id }).then( (documentId) => router.push(`/documents/${documentId}`) ); toast.promise(promise, { loading: , success: , error: , }); }; const pageTitle = `${user?.firstName || }s Jotion, where you can create and manage your documents effortlessly.`; const pageUrl = typeof window !== ? window.location.href : ; return ( <> <Head key=> <title key=>{pageTitle}</title> <meta key= name= content={pageDescription} /> <meta key= property= content={pageTitle} /> <meta key= property= content={pageDescription} /> <meta key= property= content={pageUrl} /> <meta key= property= content= /> <meta key= property= content= /> <meta key= name= content= /> <meta key= property= content={pageTitle} /> <meta key= property= content={pageDescription} /> <meta key= property= content= /> </Head> <div className=> <h2 className=> Welcome to {user?.firstName || }&apos;s Jotion </h2> <Button onClick={onCreate}> <PlusCircle className= /> Create a note </Button> </div> </> ); }; export default DocumentsPage;

// app\(main)\(routes)\documents\[documentId]\page.tsx
; import { useMutation, useQuery } from ; import dynamic from ; import { useMemo } from ; import { api } from ; import { Id } from ; import { Toolbar } from ; import { Cover } from ; import { Skeleton } from ; import { useDocumentTitle } from ; interface DocumentIdPageProps { params: { documentId: Id<>; }; } const DocumentIdPage = ({ params }: DocumentIdPageProps) => { const Editor = useMemo( () => dynamic(() => import(), { ssr: false }), [] ); const document = useQuery(api.documents.getById, { documentId: params.documentId, }); const update = useMutation(api.documents.update); const onChange = (content: string) => { update({ id: params.documentId, content, }); }; useDocumentTitle(document, ); if (document === undefined) { return ( <div> <Cover.Skeleton /> <div className=> <div className=> <Skeleton className= /> <Skeleton className= /> <Skeleton className= /> <Skeleton className= /> </div> </div> </div> ); } if (document === null) { return <div>Not found</div>; } return ( <div className=> <Cover url={document.coverImage} /> <div className=> <Toolbar initialData={document} /> <Editor onChange={onChange} initialContent={document.content} /> </div> </div> ); }; export default DocumentIdPage;

// app\(public)\(routes)\preview\[documentId]\page.tsx
; import { useMutation, useQuery } from ; import dynamic from ; import { useMemo, useEffect, useState } from ; import Head from ; import { usePathname } from ; import { api } from ; import { Id } from ; import { Toolbar } from ; import { Cover } from ; import { Skeleton } from ; import { useDocumentTitle } from ; interface DocumentIdPageProps { params: { documentId: Id<>; }; } const DocumentIdPage = ({ params }: DocumentIdPageProps) => { const Editor = useMemo( () => dynamic(() => import(), { ssr: false }), [] ); const pathname = usePathname(); const [fullUrl, setFullUrl] = useState<string>(); const document = useQuery(api.documents.getById, { documentId: params.documentId, }); useDocumentTitle(document || undefined, ); const update = useMutation(api.documents.update); const onChange = (content: string) => { update({ id: params.documentId, content, }); }; useEffect(() => { if (typeof window !== ) { const protocol = window.location.protocol; const host = window.location.host; setFullUrl(`${protocol} } }, [pathname]); if (document === undefined) { return ( <div> <Cover.Skeleton /> <div className=> <div className=> <Skeleton className= /> <Skeleton className= /> <Skeleton className= /> <Skeleton className= /> </div> </div> </div> ); } if (document === null) { return <div>Not found</div>; } const title = `KenDev - ${document.title}`; const description = document.content ? document.content.substring(0, 200) : ; const defaultImage = ; const imageUrl = document.coverImage || defaultImage; const faviconUrl = document.icon || ; return ( <> <Head> <title key=>{title}</title> <link rel= href={faviconUrl} key= /> {} <meta property= content= key= /> <meta property= content={fullUrl} key= /> <meta property= content={title} key= /> <meta property= content={description} key= /> <meta property= content={imageUrl} key= /> {} <meta property= content= key= /> <meta property= content={fullUrl} key= /> <meta property= content={title} key= /> <meta property= content={description} key= /> <meta property= content={imageUrl} key= /> </Head> <div className=> {document.coverImage && ( <Cover preview url={document.coverImage} /> )} <div className=> <Toolbar preview initialData={document} /> <Editor editable={false} onChange={onChange} initialContent={document.content} /> </div> </div> </> ); }; export default DocumentIdPage;

// hooks\use-document-title.tsx
import { useEffect } from ; import { Id } from ; interface DocumentData { _id: Id<>; title: string; icon?: string; } export const useDocumentTitle = ( documentData: DocumentData | undefined, prefix: string = ) => { useEffect(() => { if (documentData) { document.title = `${prefix}${documentData.title}`; if (documentData.icon) { const link: HTMLLinkElement = document.querySelector() || document.createElement(); link.type = ; link.rel = ; link.href = documentData.icon; document.getElementsByTagName()[0].appendChild(link); } } }, [documentData, prefix]); };

